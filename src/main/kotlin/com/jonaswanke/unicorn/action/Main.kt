package com.jonaswanke.unicorn.action

import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonFactory
import com.fasterxml.jackson.databind.DeserializationFeature
import com.fasterxml.jackson.databind.ObjectMapper
import com.jonaswanke.unicorn.script.Git
import com.jonaswanke.unicorn.script.GitHub
import com.jonaswanke.unicorn.script.Unicorn
import org.kohsuke.github.GHIssue
import java.io.File

private const val COMMENT_IDENTIFIER = "<!-- unicorn-generated-comment -->"
private const val COMMENT_SUFFIX = """
<p align="right">
  Generated by :unicorn: <a href="https://github.com/JonasWanke/Unicorn">Unicorn</a>
</p>"""

fun main() {
    Unicorn.prefix = System.getenv("GITHUB_WORKSPACE")
        ?.let { File(it) }
        ?: throwError("GITHUB_WORKSPACE not set")
    val repoToken = getRequiredInput("repo-token")

    val gh = GitHub.authenticateWithToken(repoToken)
    val repo = System.getenv("GITHUB_REPOSITORY")
        ?.let { gh.api.getRepository(it) }
        ?: throwError("GITHUB_REPOSITORY not set")
    val projectConfig = Unicorn.getProjectConfig()

    val eventFile = System.getenv("GITHUB_EVENT_PATH")?.let { File(it) }
        ?: throwError("GITHUB_EVENT_PATH not set")
    val payload = ObjectMapper(JsonFactory())
        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)
        .readValue(eventFile, WebhookPayload::class.java)
    payload.pullRequest ?: throwError("Unicorn currently only supports events of type pull_request")

    val git = Git()
    val branch = git.flow.currentBranch(gh) as? Git.Flow.IssueBranch
        ?: throwError("Current branch is not a valid issue branch")
    val pr = repo.getPullRequest(payload.pullRequest.number)
    pr.createOrUpdateComment("test")
}

private fun GHIssue.createOrUpdateComment(body: String) {
    val newBody = "$COMMENT_IDENTIFIER\n$body\n\n$COMMENT_SUFFIX"
    comments
        .firstOrNull { COMMENT_IDENTIFIER in it.body }
        ?.also {
            it.update(newBody)
            return
        }

    comment(newBody)
}

data class WebhookPayload(
    @JsonProperty("pull_request")
    val pullRequest: PullRequest? = null
) {
    data class PullRequest(
        @JsonProperty("number")
        val number: Int
    )
}
